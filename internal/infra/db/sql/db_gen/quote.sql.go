// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: quote.sql

package db_gen

import (
	"context"
	"database/sql"
	"time"
)

const createQuote = `-- name: CreateQuote :exec
INSERT INTO quotes (id, book_id, content, page, created_at) VALUES ($1, $2, $3, $4, $5)
`

type CreateQuoteParams struct {
	ID        string
	BookID    string
	Content   string
	Page      int32
	CreatedAt time.Time
}

func (q *Queries) CreateQuote(ctx context.Context, arg CreateQuoteParams) error {
	_, err := q.db.ExecContext(ctx, createQuote,
		arg.ID,
		arg.BookID,
		arg.Content,
		arg.Page,
		arg.CreatedAt,
	)
	return err
}

const listQuotes = `-- name: ListQuotes :many
SELECT q.id, q.content, q.page, q.book_id, q.created_at, q.updated_at, b.title as book_title, count(*) OVER() AS full_count
FROM  quotes q JOIN books b ON q.book_id = b.id
OFFSET $1 LIMIT $2
`

type ListQuotesParams struct {
	Offset int32
	Limit  int32
}

type ListQuotesRow struct {
	ID        string
	Content   string
	Page      int32
	BookID    string
	CreatedAt time.Time
	UpdatedAt sql.NullTime
	BookTitle string
	FullCount int64
}

func (q *Queries) ListQuotes(ctx context.Context, arg ListQuotesParams) ([]ListQuotesRow, error) {
	rows, err := q.db.QueryContext(ctx, listQuotes, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListQuotesRow
	for rows.Next() {
		var i ListQuotesRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Page,
			&i.BookID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BookTitle,
			&i.FullCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
